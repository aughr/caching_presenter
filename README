CachingPresenter in an implementation of the Rails presenter pattern by me (Zach Dennis @ Mutually Human Software). 

In short it memoizes all method calls made through the presenter. That is, you call a method once and all subsequent calls return the cached value from the first call. This works with method arguments as well. The only time it doesn't work is when you call a method with a block. It doesn't work here so methods like #each, #map, etc. work as expected. 

  class ProjectPresenter < CachingPresenter
    # writes a constructed for ProjectPresenter.new :project => ...
    presents :project
    
    def foo(arg)
      # this method is automatically memoized
    end
    
    # the 'bar' method is automatically memoized
    delegate :bar, :to => :@project
  end
  
  presenter = ProjectPresenter.new :project => Project.first
  
  # executes the first time, but the second time it returns the cached result
  presenter.foo "something"
  presenter.foo "something"
  
  # even though we called #foo, this time its with a different argument
  # so it executes for the first time, and then returns the cached result
  # the second time
  presenter.foo "anything"  
  presenter.foo "anything"  
  
  # the 'id' method doesn't exist on the presenter, but the project
  # has an 'id' method, so this will automatically memoize that
  # method call, so it will be execute the first time it is called, but then
  # it will return the cached result the second time
  presenter.id
  presenter.id

  # even though we called 'foo' earlier, this time it's called with a block
  # and CachingPresenter will always execute this. Both of these calls
  # are executed without caching/memoization techniques.
  presenter.foo { do_something }
  presenter.foo { do_something_else }

== Github

* repos: http://github.com/mhs/caching_presenter/ 
* wiki: http://github.com/mhs/caching_presenter/wiki

== Contact

* Zach Dennis, zdennis@mutuallyhuman.com
* http://www.mutuallyhuman.com
* http://www.continuousthinking.com


